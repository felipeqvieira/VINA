                Inicializar Membro

A função `inicializar_membro` tem como objetivo criar e inicializar um novo membro com informações específicas. Ela recebe um ponteiro para ponteiro de `Membro` como parâmetro, o que permite que a função aloque memória para um novo membro e atualize o valor do ponteiro original fora da função.

Aqui está uma explicação das características da função:

- `void inicializar_membro(Membro** membro, const char* nome)`: A função `inicializar_membro` recebe um ponteiro para ponteiro de `Membro` e uma string `nome` como parâmetros. O ponteiro para ponteiro de `Membro` é usado para que a função possa atualizar o valor do ponteiro original e garantir que ele aponte para o novo membro criado dentro da função.

- `*membro = malloc(sizeof(Membro))`: A função aloca memória dinamicamente para um novo membro usando `malloc`. O tamanho alocado é calculado usando `sizeof(Membro)`, que representa o tamanho em bytes da estrutura `Membro`. O ponteiro original é atualizado para apontar para o novo membro alocado.

- `strncpy((*membro)->nome, nome, sizeof((*membro)->nome))`: A função `strncpy` é usada para copiar o conteúdo da string `nome` para o campo `nome` do novo membro. A cópia é limitada ao tamanho máximo do campo `nome` usando `sizeof((*membro)->nome)` para evitar possíveis estouros de buffer.

- `(*membro)->nome[sizeof((*membro)->nome) - 1] = '\0'`: É adicionado o caractere nulo `\0` ao final do campo `nome` para garantir que seja uma string válida.

- As demais linhas inicializam os demais campos do membro (`user_ID`, `permissoes`, `tamanho`, `data_modificacao`, `ordem` e `localizacao`) com valores padrão (0 no caso dessa implementação).

Em resumo, a função `inicializar_membro` cria um novo membro, aloca memória dinamicamente para ele, copia o nome fornecido para o campo `nome` e inicializa os demais campos com valores padrão. O uso de um ponteiro para ponteiro permite que o ponteiro original seja atualizado e aponte para o novo membro criado dentro da função.